name: "Publish"

on:
  release:
    types:
      - published
      - edited
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Pre-release'
        required: true
        type: boolean

jobs:
  publish:
    name: "Publish"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare Docker environment
        run: (docker buildx ls | grep docker-container || docker buildx create --use) && docker run -i --rm --privileged tonistiigi/binfmt --install all

      - name: Authorize Docker
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 217303665077.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: actions/github-script@0.9.0
        id: get-image-tag
        env:
          PRERELEASE: ${{ github.event.inputs.prerelease }}
        with:
          result-encoding: string
          script: |
            const { PRERELEASE } = process.env
            let imageTag = context.ref.replace('refs/heads/', '').replace('refs/tags/', '')
            if (PRERELEASE) {
              const timestamp = + new Date()
              imageTag += "-" + timestamp
            }
            return imageTag

      - name: Set Image Tag
        run: echo IMAGE_TAG=${{steps.get-image-tag.outputs.result}} >> $GITHUB_ENV

      - name: Build and Publish
        run: make build
        env:
          PLATFORMS: "linux/amd64,linux/arm64"
          BUILD_FLAGS: "--push"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - uses: actions/github-script@0.9.0
        if: github.event.inputs.prerelease && github.event.inputs.prerelease != 'false'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issues = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })
            issue_number = context.issue.number || issues.data[0].number
            
            const output = `#### Published version \`${{ env.IMAGE_TAG }}\` by @${{ github.actor }}`;
            github.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
